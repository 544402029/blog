import{_ as e,c as a,o as l,a3 as t}from"./chunks/framework.COm4hYgr.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{"prev":"通信类","next":"CSS"},"headers":[],"relativePath":"面试题库/HTML.md","filePath":"面试题库/HTML.md"}'),o={name:"面试题库/HTML.md"},i=t('<h2 id="html" tabindex="-1">HTML <a class="header-anchor" href="#html" aria-label="Permalink to &quot;HTML&quot;">​</a></h2><h3 id="w3c-标准" tabindex="-1">W3C 标准 <a class="header-anchor" href="#w3c-标准" aria-label="Permalink to &quot;W3C 标准&quot;">​</a></h3><h4 id="web-标准以及-w3c-标准是什么" tabindex="-1">WEB 标准以及 W3C 标准是什么? <a class="header-anchor" href="#web-标准以及-w3c-标准是什么" aria-label="Permalink to &quot;WEB 标准以及 W3C 标准是什么?&quot;">​</a></h4><ol><li>标签闭合</li><li>标签小写</li><li>不乱嵌套</li><li>使用外链 css 和 js</li><li>结构行为表现的分离</li></ol><h3 id="语义化" tabindex="-1">语义化 <a class="header-anchor" href="#语义化" aria-label="Permalink to &quot;语义化&quot;">​</a></h3><h4 id="谈谈你对语义化的理解" tabindex="-1">谈谈你对语义化的理解？ <a class="header-anchor" href="#谈谈你对语义化的理解" aria-label="Permalink to &quot;谈谈你对语义化的理解？&quot;">​</a></h4><ul><li>用<strong>正确</strong>的标签做正确的事情！</li><li>语义化就是让页面的<strong>内容结构化</strong>，便于对浏览器、搜索引擎解析。</li><li>在没有样式 CSS 情况下也以一种<strong>文档格式显</strong>示，并且是容易阅读的。</li><li><strong>搜索引擎</strong>的爬虫依赖于标记来确定上下文和各个关键字的权重，利于 SEO。</li><li><strong>源代码</strong>更容易阅读、维护、理解。</li></ul><h3 id="xhtml-和-html" tabindex="-1">xhtml 和 html <a class="header-anchor" href="#xhtml-和-html" aria-label="Permalink to &quot;xhtml 和 html&quot;">​</a></h3><ul><li>一个是功能上的差别 <ul><li>主要是 XHTML 可兼容各大浏览器、手机以及 PDA，并且浏览器也能快速正确地编译网页</li></ul></li><li>另外是书写习惯的差别 <ul><li>XHTML 元素必须被正确地嵌套，闭合，区分大小写，文档必须拥有根元素</li></ul></li></ul><h3 id="global-attribute" tabindex="-1">global attribute <a class="header-anchor" href="#global-attribute" aria-label="Permalink to &quot;global attribute&quot;">​</a></h3><h4 id="html-全局属性-global-attribute-有哪些" tabindex="-1">HTML 全局属性(global attribute)有哪些？ <a class="header-anchor" href="#html-全局属性-global-attribute-有哪些" aria-label="Permalink to &quot;HTML 全局属性(global attribute)有哪些？&quot;">​</a></h4><ul><li><code>id</code>: 元素 id，文档内唯一</li><li><code>class</code>: 为元素设置类标识</li><li><code>style</code>: 行内 css 样式</li><li><code>title</code>: 元素相关的建议信息</li><li><code>lang</code>: 元素内容的的语言</li><li><code>data-*</code>: 为元素增加自定义属性</li><li><code>draggable</code>: 设置元素是否可拖拽</li></ul><h3 id="html5" tabindex="-1">HTML5 <a class="header-anchor" href="#html5" aria-label="Permalink to &quot;HTML5&quot;">​</a></h3><h4 id="什么是-doctype-及作用" tabindex="-1">什么是 DOCTYPE 及作用？ <a class="header-anchor" href="#什么是-doctype-及作用" aria-label="Permalink to &quot;什么是 DOCTYPE 及作用？&quot;">​</a></h4><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;!</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">DOCTYPE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><ul><li>DOCTYPE: 是用来声明文档类型和 DTD 规范的</li><li>DTD: 定义文档类型，浏览器会根据它来决定用哪种协议来解析以及切换浏览器模式。</li></ul><p>HTML4.0 有传统模式和严格模式。</p><p>传统模式包含所有 HTML 元素和属性，包括展示性和弃用的元素。（如 <code>font</code>）</p><p>严格模式包含所有 HTML 元素和属性，但不包括展示性和弃用的元素。（如 <code>font</code>）</p><h4 id="html5-为什么只需要写" tabindex="-1">HTML5 为什么只需要写 ？ <a class="header-anchor" href="#html5-为什么只需要写" aria-label="Permalink to &quot;HTML5 为什么只需要写 &lt;!DOCTYPE html&gt;？&quot;">​</a></h4><ul><li>HTML5 不基于 SGML，因此不需要对 DTD 进行引用，但是需要<code>DOCTYPE</code>来规范浏览器的行为</li><li>而 HTML4.01 基于 SGML，所以需要对 DTD 进行引用，才能告知浏览器所使用的文档类型</li></ul><h4 id="html5-有哪些新特性" tabindex="-1">html5 有哪些新特性？ <a class="header-anchor" href="#html5-有哪些新特性" aria-label="Permalink to &quot;html5 有哪些新特性？&quot;">​</a></h4><p>HTML5 现在已经不是 SGML 的子集，主要是关于图像，位置，存储，多任务等功能的增加</p><ul><li>绘画 <code>canvas</code></li><li>用于媒介回放的 <code>video</code> 和 <code>audio</code> 元素</li><li>本地离线存储 <code>localStorage</code> ,<code>sessionStorage</code></li><li>语意化更好的内容元素，比如<code>article</code>、<code>footer</code>、<code>header</code>、<code>nav</code>、<code>section</code></li><li>表单控件，<code>date</code>、<code>time</code>、<code>email</code>、<code>url</code>、<code>search</code></li><li>新的技术<code>webworker</code>, <code>websocket</code></li></ul><h4 id="html5-有移除的元素" tabindex="-1">html5 有移除的元素? <a class="header-anchor" href="#html5-有移除的元素" aria-label="Permalink to &quot;html5 有移除的元素?&quot;">​</a></h4><ul><li>纯表现的元素：<code>basefont</code>，<code>font</code>, <code>big</code>，<code>center</code>，<code>s</code></li><li>对可用性产生负面影响的元素：<code>frame</code></li></ul><h4 id="canvas-和-svg-有什么区别" tabindex="-1">Canvas 和 SVG 有什么区别？ <a class="header-anchor" href="#canvas-和-svg-有什么区别" aria-label="Permalink to &quot;Canvas 和 SVG 有什么区别？&quot;">​</a></h4><ul><li><code>svg</code>输出的图形是<strong>矢量图形</strong>，它绘制出来的每一个图形元素都是独立的 DOM 节点，能够方便的绑定事件或用来修改。,也可以修改参数来自由放大缩小，不会<strong>失真和有锯齿</strong>。</li><li>而<code>canvas</code>输出<strong>标量画布</strong>，就像一张图片一样，放大会失真或者锯齿</li></ul><hr>',29),d=[i];function c(r,s,h,n,u,m){return l(),a("div",null,d)}const p=e(o,[["render",c]]);export{g as __pageData,p as default};
