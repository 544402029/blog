import{_ as a,c as e,o as t,a3 as o}from"./chunks/framework.COm4hYgr.js";const b=JSON.parse('{"title":"5 层网络模型","description":"","frontmatter":{},"headers":[],"relativePath":"前端笔记/HTTP协议原理+实践 Web开发工程师必学.md","filePath":"前端笔记/HTTP协议原理+实践 Web开发工程师必学.md"}'),r={name:"前端笔记/HTTP协议原理+实践 Web开发工程师必学.md"},i=o('<h1 id="_5-层网络模型" tabindex="-1">5 层网络模型 <a class="header-anchor" href="#_5-层网络模型" aria-label="Permalink to &quot;5 层网络模型&quot;">​</a></h1><p><img src="https://blog-picgo-typora.oss-cn-hangzhou.aliyuncs.com/wucengmoxing.png" alt="输入图片说明"></p><h2 id="物理层" tabindex="-1">物理层 <a class="header-anchor" href="#物理层" aria-label="Permalink to &quot;物理层&quot;">​</a></h2><p>物理层主要作用是定义物理设备如何传输数据。 比如网卡端口，网线，光缆等</p><h2 id="数据链路层" tabindex="-1">数据链路层 <a class="header-anchor" href="#数据链路层" aria-label="Permalink to &quot;数据链路层&quot;">​</a></h2><p>数据链路层在通信的实体间建立数据链路连接。 通过物理设备建立一个电路的连接，两边可以传输数据，基本上就是基础的传输数据（0101 之类的东西）</p><h2 id="网络层" tabindex="-1">网络层 <a class="header-anchor" href="#网络层" aria-label="Permalink to &quot;网络层&quot;">​</a></h2><p>网络层为数据在结点之间传输创建逻辑链路 比如从我的电脑访问百度的服务器，那么我们如何寻找百度这台服务器所在的地址？它就是一个逻辑关系，那么这个关系就是在网络层为我们创建的。</p><h2 id="传输层" tabindex="-1">传输层 <a class="header-anchor" href="#传输层" aria-label="Permalink to &quot;传输层&quot;">​</a></h2><p>向用户提供可靠的端到端服务。</p><blockquote><p>两台设备传输的方式都是在这层定义的，传输数据过大可能会分包，分片。传递到另一台设备会进行组装。</p></blockquote><p>传输层向高层屏蔽了下层数据通信的细节。</p><blockquote><p>数据的拼装以及传输过程，我们是不用知道的，因为传输层已经封装好了。</p></blockquote><p>TCP/IP 协议， UDP 协议处于该层。</p><h2 id="应用层" tabindex="-1">应用层 <a class="header-anchor" href="#应用层" aria-label="Permalink to &quot;应用层&quot;">​</a></h2><p>为应用软件提供了很多服务。 构建于 TCP 协议之上。 屏蔽了网络传输相关细节。</p><h1 id="发展历史" tabindex="-1">发展历史 <a class="header-anchor" href="#发展历史" aria-label="Permalink to &quot;发展历史&quot;">​</a></h1><p><img src="https://blog-picgo-typora.oss-cn-hangzhou.aliyuncs.com/http0.9.png" alt="输入图片说明"></p><p><img src="https://blog-picgo-typora.oss-cn-hangzhou.aliyuncs.com/http1.0.png" alt="输入图片说明"></p><p><img src="https://blog-picgo-typora.oss-cn-hangzhou.aliyuncs.com/http1.1.png" alt="输入图片说明"></p><h3 id="持久连接" tabindex="-1">持久连接 <a class="header-anchor" href="#持久连接" aria-label="Permalink to &quot;持久连接&quot;">​</a></h3><p>一次连接后不会断开 TCP</p><h3 id="pipleline" tabindex="-1">pipleline <a class="header-anchor" href="#pipleline" aria-label="Permalink to &quot;pipleline&quot;">​</a></h3><p>http1.0 为串行发送，服务端的上个请求发送完毕后才能继续发送下一个请求 1.1 为并行发送</p>',24),l=[i];function p(h,n,c,s,_,d){return t(),e("div",null,l)}const m=a(r,[["render",p]]);export{b as __pageData,m as default};
