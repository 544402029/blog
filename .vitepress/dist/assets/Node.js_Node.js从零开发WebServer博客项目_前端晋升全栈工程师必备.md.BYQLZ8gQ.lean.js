import{_ as s,c as a,o as i,a3 as n}from"./chunks/framework.COm4hYgr.js";const E=JSON.parse('{"title":"Node.js从零开发Web Server博客项目 前端晋升全栈工程师必备","description":"","frontmatter":{},"headers":[],"relativePath":"Node.js/Node.js从零开发WebServer博客项目,前端晋升全栈工程师必备.md","filePath":"Node.js/Node.js从零开发WebServer博客项目,前端晋升全栈工程师必备.md"}'),e={name:"Node.js/Node.js从零开发WebServer博客项目,前端晋升全栈工程师必备.md"},p=n(`<h1 id="node-js从零开发web-server博客项目-前端晋升全栈工程师必备" tabindex="-1">Node.js从零开发Web Server博客项目 前端晋升全栈工程师必备 <a class="header-anchor" href="#node-js从零开发web-server博客项目-前端晋升全栈工程师必备" aria-label="Permalink to &quot;Node.js从零开发Web Server博客项目 前端晋升全栈工程师必备&quot;">​</a></h1><h2 id="node-js用途" tabindex="-1">Node.js用途 <a class="header-anchor" href="#node-js用途" aria-label="Permalink to &quot;Node.js用途&quot;">​</a></h2><p>Node.js是一个JavaScript的运行环境。它一般有两个用途：</p><ol><li>运行在服务器， 作为web server</li><li>运行在本地， 作为打包、构建工具。</li></ol><h2 id="node-js介绍" tabindex="-1">Node.js介绍 <a class="header-anchor" href="#node-js介绍" aria-label="Permalink to &quot;Node.js介绍&quot;">​</a></h2><h3 id="下载-安装" tabindex="-1">下载 &amp; 安装 <a class="header-anchor" href="#下载-安装" aria-label="Permalink to &quot;下载 &amp; 安装&quot;">​</a></h3><h4 id="普通安装" tabindex="-1">普通安装 <a class="header-anchor" href="#普通安装" aria-label="Permalink to &quot;普通安装&quot;">​</a></h4><p>直接在官网下载即可<a href="https://nodejs.org/en/" target="_blank" rel="noreferrer">Node.js官网</a></p><h4 id="使用nvm" tabindex="-1">使用nvm <a class="header-anchor" href="#使用nvm" aria-label="Permalink to &quot;使用nvm&quot;">​</a></h4><p>nvm， node.js版本管理工具， 可切换多个node.js版本</p><ul><li>mac os 使用<code>brew install nvm</code>进行安装</li></ul><p>在<a href="https://brew.sh" target="_blank" rel="noreferrer">brew官网</a>复制首页代码， 去命令行粘贴运行。安装完之后执行<code>brew install nvm</code>。</p><ul><li>windows, github 中搜索nvm-windows， 有下载地址。</li></ul><h5 id="nvm命令-工作中常用" tabindex="-1">nvm命令(工作中常用)： <a class="header-anchor" href="#nvm命令-工作中常用" aria-label="Permalink to &quot;nvm命令(工作中常用)：&quot;">​</a></h5><p>nvm(node virsion menage) 可以安装多个node，并切换</p><p><code>nvm list</code> 查看所有node版本</p><p><code>nvm install v10.13.0</code> 安装指定版本</p><p><code>nvm use --delete-prefix 10.13.0</code> 切换到指定版本</p><p>如果本地安装了node 需要删掉后重新装nvm 再安装node，这样才能控制全部版本 否则会报错： node v--delete-prefix.0.0 (64-bit) is not installed.</p><h3 id="node-js和javascript的区别" tabindex="-1">Node.js和JavaScript的区别 <a class="header-anchor" href="#node-js和javascript的区别" aria-label="Permalink to &quot;Node.js和JavaScript的区别&quot;">​</a></h3><p>首先写JavaScript和Node.js必须遵守ECMAScript规范。</p><p>ECMAScript定义了语法， 保存变量定义， 循环， 判断， 函数， 原型和原型链， 作用域和闭包， 异步。</p><p>但是ECMAScript只定义了语法，不能进行以下操作：</p><ul><li>不能操作DOM， 不能监听事件， 不能发送ajax请求</li><li>不能处理http请求， 不能操作文件</li><li>即， 只有ECMAScript， 几乎做不了任何实际的项目。</li></ul><h4 id="javascript" tabindex="-1">JavaScript <a class="header-anchor" href="#javascript" aria-label="Permalink to &quot;JavaScript&quot;">​</a></h4><p>使用了ECMAScript语法规范， 外加Web API， 缺一不可。WEB API包括DOM操作， BOM操作， 事件绑定， Ajax等。 两者结合， 即可完成 浏览器端的任何操作。</p><h4 id="node-js" tabindex="-1">Node.js <a class="header-anchor" href="#node-js" aria-label="Permalink to &quot;Node.js&quot;">​</a></h4><p>使用了ECMAScript语法规范， 外加Node.js API， 缺一不可。Node.js API包括http, 处理文件等。具体参考<a href="http://node.js.cn/api/" target="_blank" rel="noreferrer">Node.js API </a> 两者结合， 即可完成 Server端的任何操作。</p><h3 id="common-js" tabindex="-1">common.js <a class="header-anchor" href="#common-js" aria-label="Permalink to &quot;common.js&quot;">​</a></h3><p>node应用由模块组成，采用的commonjs模块规范。每一个文件就是一个模块，拥有自己独立的作用域，变量，以及方法等，对其他的模块都不可见。CommonJS规范规定，每个模块内部，module变量代表当前模块。这个变量是一个对象，它的exports属性（即module.exports）是对外的接口。加载某个模块，其实是加载该模块的module.exports属性。require方法用于加载模块。</p><h4 id="使用" tabindex="-1">使用 <a class="header-anchor" href="#使用" aria-label="Permalink to &quot;使用&quot;">​</a></h4><p>a.js</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>function add (a,b){</span></span>
<span class="line"><span>  return a+b</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>module.exports = add</span></span></code></pre></div><p>b.js</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>const add = require(&#39;./a&#39;)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>const sum = add(10,20)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>console.log(sum);</span></span></code></pre></div><h4 id="引入多个" tabindex="-1">引入多个 <a class="header-anchor" href="#引入多个" aria-label="Permalink to &quot;引入多个&quot;">​</a></h4><p>a.js</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>function add (a,b){</span></span>
<span class="line"><span>  return a+b</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>function mul (a,b){</span></span>
<span class="line"><span>  return a*b</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>module.exports = {</span></span>
<span class="line"><span>  add,</span></span>
<span class="line"><span>  mul</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>b.js</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mul</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> sum</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> sum2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mul</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sum,sum2);</span></span></code></pre></div><h3 id="前端与server端的区别" tabindex="-1">前端与Server端的区别 <a class="header-anchor" href="#前端与server端的区别" aria-label="Permalink to &quot;前端与Server端的区别&quot;">​</a></h3><p>server开发和前端开发的区别： 语言和环境工程思维的不同。</p><p>前端开发： 每个客户端 对接一个server端（可能不止一台服务器，可能是一个集群）。前端开发的代码是通过server端下载到本地（客户端），然后在客户端浏览器执行的。</p><p>server开发： 它要承接很多客户端的请求，很多请求到了server端，然后server端去处理。</p><p>总结的区别：</p><ol><li>服务稳定性（服务端不可挂）</li><li>考虑内存和CPU （优化、扩展）</li><li>日志记录（程序运行的报告，没有这个，对程序运行相当于盲人一样~）</li><li>安全</li><li>集群和服务拆分</li></ol><h2 id="技术方案" tabindex="-1">技术方案 <a class="header-anchor" href="#技术方案" aria-label="Permalink to &quot;技术方案&quot;">​</a></h2><h3 id="接口设计" tabindex="-1">接口设计 <a class="header-anchor" href="#接口设计" aria-label="Permalink to &quot;接口设计&quot;">​</a></h3><p><img src="https://blog-picgo-typora.oss-cn-hangzhou.aliyuncs.com/image-20220805084925165.png" alt="image-20220805084925165"></p><h2 id="http概述" tabindex="-1">http概述 <a class="header-anchor" href="#http概述" aria-label="Permalink to &quot;http概述&quot;">​</a></h2><p>问题： 从浏览器输入url到页面渲染都发生了什么？</p><p>DNS解析获取到ip地址 -&gt; 建立tcp连接 -&gt; 发送http请求 -&gt; server接受http请求，并处理请求返回数据 -&gt; 客户端接受数据并处理数据（渲染页面，执行js） 中间涉及到到IP协议，ARP协议，OSPF协议</p><ol><li>IP协议：指定出发地（你的pc）和目的地（服务器）</li><li>ARP协议：找到所有路径</li><li>OSPF协议：找到最优路径请求资源</li></ol><h2 id="搭建开发环境" tabindex="-1">搭建开发环境 <a class="header-anchor" href="#搭建开发环境" aria-label="Permalink to &quot;搭建开发环境&quot;">​</a></h2><h3 id="安装nodemon" tabindex="-1">安装nodemon <a class="header-anchor" href="#安装nodemon" aria-label="Permalink to &quot;安装nodemon&quot;">​</a></h3><p>nodemon 可以实现自动重启</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npm i nodemon cross-env -D</span></span></code></pre></div><p>安装完成之后在package.json的script命令中输入以下内容</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&quot;dev&quot;:&quot;cross-env NODE_ENV=dev nodemon ./bin/www.js&quot;</span></span></code></pre></div><p>之后直接在命令行输入<code>npm run dev</code>即可。</p><p><code>NODE_ENV=dev</code>指的是执行环节是开发环境。在代码中可以通过<code>process.env.NODE_ENV</code>获取到环境变量。</p><h2 id="node-js模块" tabindex="-1">Node.js模块 <a class="header-anchor" href="#node-js模块" aria-label="Permalink to &quot;Node.js模块&quot;">​</a></h2><h3 id="获取query" tabindex="-1">获取query <a class="header-anchor" href="#获取query" aria-label="Permalink to &quot;获取query&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>const querystring = require(&#39;querystring&#39;)</span></span>
<span class="line"><span>req.query = querystring.parse(url.split(&#39;?&#39;)[0])</span></span></code></pre></div><h3 id="文件操作" tabindex="-1">文件操作 <a class="header-anchor" href="#文件操作" aria-label="Permalink to &quot;文件操作&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>const fs = require(&#39;fs&#39;)</span></span></code></pre></div><h3 id="获取文件路径" tabindex="-1">获取文件路径 <a class="header-anchor" href="#获取文件路径" aria-label="Permalink to &quot;获取文件路径&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>const path = require(&#39;path&#39;)</span></span>
<span class="line"><span>const fileName = path.resolve(__dirname,&#39;file&#39;,&#39;a.json&#39;)</span></span></code></pre></div><p>__diraname：当前目录， file：文件夹， a.json：文件</p><h2 id="数据库操作" tabindex="-1">数据库操作 <a class="header-anchor" href="#数据库操作" aria-label="Permalink to &quot;数据库操作&quot;">​</a></h2><p>首先需要下载 MySql 和 SQLWorkBench。</p><p>以下为SQLWorkBench内操作。</p><h2 id="查看数据库" tabindex="-1">查看数据库 <a class="header-anchor" href="#查看数据库" aria-label="Permalink to &quot;查看数据库&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>show databases;</span></span></code></pre></div><p><img src="https://blog-picgo-typora.oss-cn-hangzhou.aliyuncs.com/image-20220805085004732.png" alt="image-20220805085004732"></p><h3 id="使用数据库" tabindex="-1">使用数据库 <a class="header-anchor" href="#使用数据库" aria-label="Permalink to &quot;使用数据库&quot;">​</a></h3><p>我们想要操作数据库首先要执行：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>use blog;</span></span></code></pre></div><p>blog指的是数据库名称。</p><p>显示所有数据库表：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>show tables;</span></span></code></pre></div><h4 id="增加数据" tabindex="-1">增加数据 <a class="header-anchor" href="#增加数据" aria-label="Permalink to &quot;增加数据&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>insert into users(username,\`password\`,realname) values(&#39;zhangsan&#39;,&#39;123&#39;,&#39;张三&#39;);</span></span></code></pre></div><p>如果遇到SQL关键字， 我们可以用反引号把它包起来， 如:password</p><h4 id="查询数据库" tabindex="-1">查询数据库 <a class="header-anchor" href="#查询数据库" aria-label="Permalink to &quot;查询数据库&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>-- select * from users;</span></span></code></pre></div><p>select指的就是查询， <code>*</code>指的是我把所有的列都查出来。 user指的是表名。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>select id,username from users;</span></span></code></pre></div><p>也可以只查询id，和username。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>select * from users where username=&#39;zhangsan&#39;;</span></span></code></pre></div><p>增加了查询条件， 只查询username是张三的数据。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>select * from users where username=&#39;zhangsan&#39; and \`password\`=&#39;123&#39;;</span></span></code></pre></div><p>查询username=&#39;zhangsan&#39;并且password=&#39;123&#39; 的数据。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>select * from users where username=&#39;zhangsan&#39; or \`password\`=&#39;123&#39;;</span></span></code></pre></div><p>查询username=&#39;zhangsan&#39;或者password=&#39;123&#39; 的数据。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>select * from users where username like &#39;%zhang%&#39;;</span></span></code></pre></div><p>只模糊匹配查询username字段有zhang的数据。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>select * from users where password like &#39;%1%&#39; order by id;</span></span></code></pre></div><p>根据id正序排序。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>select * from users where password like &#39;%1%&#39; order by id desc;</span></span></code></pre></div><p>根据id倒序排序。</p><h4 id="更新数据库" tabindex="-1">更新数据库 <a class="header-anchor" href="#更新数据库" aria-label="Permalink to &quot;更新数据库&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>update users set realname=&#39;李四2&#39;;</span></span></code></pre></div><p>把users表的所有realname都改成李四2。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>update users set realname=&#39;李四2&#39; where username=&#39;lisi&#39;;</span></span></code></pre></div><p>把users表username=lisi的用户realname改成李四2</p><p>如果遇到报错可以执行以下语句：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>SET SQL_SAFE_UPDATES=0;</span></span></code></pre></div><h4 id="删除数据" tabindex="-1">删除数据 <a class="header-anchor" href="#删除数据" aria-label="Permalink to &quot;删除数据&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>delete from users where username=&#39;lisi&#39;;</span></span></code></pre></div><p>删除username为lisi的数据。</p><p>一般情况下我们不会真正的删除数据， 而是在表格增加一个字段<code>state</code>， 用它来进行判断是否有数据， 也就是一个软删除的技术。（state设置为0或1控制是否删除） 一般它的默认值设为1。</p><p>这样做的好处就是它是可以恢复的。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>select * from users where state=&#39;1&#39;;</span></span>
<span class="line"><span>update users set state=&#39;0&#39; where username=&#39;lisi&#39;;</span></span></code></pre></div><p>将username=lisi的数据state改为了0， 第一句是查询users表内state为1的数据。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>select * from users where state&lt;&gt;&#39;0&#39;;</span></span></code></pre></div><p>如果我们想要使用不等于， 请使用<code>&lt;&gt;</code>小于号和大于号组合，如上。</p><h2 id="node-js操作数据库" tabindex="-1">Node.js操作数据库 <a class="header-anchor" href="#node-js操作数据库" aria-label="Permalink to &quot;Node.js操作数据库&quot;">​</a></h2><p>首先我们需要安装一个插件</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npm i mysql</span></span></code></pre></div><p>index.js</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> mysql</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;mysql&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//创建连接对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> con</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mysql.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createConnection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    host: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;localhost&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    user: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;root&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    password: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;yutong9909&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    port: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;3306&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    database: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;blog&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//开始连接</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">con.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">connect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//执行 sql 语句</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> sql</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`insert into blogs(title,content,createtime,author) values(&#39;标题C&#39;,&#39;内容C&#39;,1583031695880,&#39;zhangsan&#39;);\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">con.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">query</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sql, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (err) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(err);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//关闭连接</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">con.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p><img src="https://blog-picgo-typora.oss-cn-hangzhou.aliyuncs.com/image-20220805085046072.png" alt="image-20220805085046072"></p><p>连接数据库报错</p><p>解决方案：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>use blog;</span></span>
<span class="line"><span>alter user &#39;root&#39;@&#39;localhost&#39; identified with mysql_native_password by &#39;123456&#39;;</span></span>
<span class="line"><span>flush privileges;</span></span></code></pre></div><h2 id="cookie" tabindex="-1">cookie <a class="header-anchor" href="#cookie" aria-label="Permalink to &quot;cookie&quot;">​</a></h2><h4 id="什么是cookie" tabindex="-1">什么是cookie？ <a class="header-anchor" href="#什么是cookie" aria-label="Permalink to &quot;什么是cookie？&quot;">​</a></h4><ul><li>存储在浏览器的一段字符串（最大5kb）</li><li>跨域不共享</li><li>格式如 K1=V1;K2=V2;K3=V3;因此可以存储结构化数据。</li><li>每次发送http请求， 会将请求域的cookie一起发送给server</li><li>server可以修改cookie并返回给</li><li>浏览器中也可以通过JavaScript修改cookie（有限制）</li></ul><p><img src="https://blog-picgo-typora.oss-cn-hangzhou.aliyuncs.com/image-20220805085114341.png" alt="image-20220805085114341"></p><h4 id="cookie和token的区别" tabindex="-1">cookie和token的区别？ <a class="header-anchor" href="#cookie和token的区别" aria-label="Permalink to &quot;cookie和token的区别？&quot;">​</a></h4><p>cookie 是 http 协议的规范，一种标准，即一个工具，你拿 cookie 干嘛都可以，例如课程中我们用 cookie 实现登录。token 是一种业务上的术语，可以理解为密码、秘钥等，不同业务中 token 的格式、使用方式也不同。你可以使用很多种方式来实现 token ，例如 cookie ，http header ，url 参数中，或者 req.body 中。</p><h4 id="操作cookie" tabindex="-1">操作cookie <a class="header-anchor" href="#操作cookie" aria-label="Permalink to &quot;操作cookie&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>res.setHeader(&#39;Set-Cookie&#39;,\`username=\${data.username}; path=/; httpOnly; expires=\${getCookieExpires()}\`)</span></span></code></pre></div><p>path=/代表在所有路由下都可以访问cookie. httpOnly表示此cookie不可在客户端操作。 expires=\${getCookieExpires()}设置了cookie过期时间</p><p>过期时间函数</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>//获取 cookie 的过期时间</span></span>
<span class="line"><span>const getCookieExpires = () =&gt; {</span></span>
<span class="line"><span>	const d = new Date()</span></span>
<span class="line"><span>	d.setTime(d.getTime() + (24 * 60 * 60 * 1000))</span></span>
<span class="line"><span>	return d.toGMTString()</span></span>
<span class="line"><span>}</span></span></code></pre></div><h2 id="session" tabindex="-1">session <a class="header-anchor" href="#session" aria-label="Permalink to &quot;session&quot;">​</a></h2><p>如果我们只用cookie就会有一个问题， cookie存储的个人信息都是暴露在外面的， 别人可以看到。（如你的手机号， 邮箱，用户名，密码等）。而且你其他平台的用户名及密码也有可能是一样的， 这样的话一旦泄露就十分危险。</p><p>第二个cookie存储的信息也是非常显现的， 大约为4kb。太多的信息也有可能放不开。</p><h4 id="如何解决" tabindex="-1">如何解决？ <a class="header-anchor" href="#如何解决" aria-label="Permalink to &quot;如何解决？&quot;">​</a></h4><p>我们可以在cookie中存储userid，userid可以是一个随机数之类的数字， 非常非常不相关的数字。 server端对应username。我们可以通过一个对象或者集合去查， 查出这个用户名来。</p><p><code>session</code> 是一个统称， 它的解决方案就是用server端存储用户信息。</p><p><img src="https://blog-picgo-typora.oss-cn-hangzhou.aliyuncs.com/image-20220805085144884.png" alt="image-20220805085144884"></p><p>如上图： 我们只在浏览器中放一个毫无意义的userid就可以了， 即便用户被截获， 他也不知道userid是什么意思。然后到我们的server中呢？ 首先我们的server是足够安全的，因为他不会来回传输。 只要做好足够的限制， 安全就可以了。server端的空间也是足够大的， 里面可以存储很多的信息。</p><h2 id="redis" tabindex="-1">redis <a class="header-anchor" href="#redis" aria-label="Permalink to &quot;redis&quot;">​</a></h2><p>只用session会出现两个问题：</p><ol><li>进程内存有限， 访问量过大， 内存激增怎么办？</li><li>正式上线运行是多线程， 进程之间内存无法共享</li></ol><h4 id="解决方案radis" tabindex="-1">解决方案radis <a class="header-anchor" href="#解决方案radis" aria-label="Permalink to &quot;解决方案radis&quot;">​</a></h4><ul><li>web server 最常用的缓存数据库， 数据存放在内存中</li><li>相比 mysql， 访问速度快（内存和硬盘不是一个数量级的）</li><li>但是成本更高， 可存储的数据量更小（内存的硬伤）</li><li>将web server 和 redis 拆分为两个单独的服务</li><li>双方都是独立的， 都是可扩展的（例如都扩展成集群）</li><li>（包括 mysql ， 也是一个单独的服务， 也可扩展）</li></ul><p><img src="https://blog-picgo-typora.oss-cn-hangzhou.aliyuncs.com/image-20220805085202784.png" alt="image-20220805085202784"></p><h4 id="为何session适合用-redis" tabindex="-1">为何session适合用 redis? <a class="header-anchor" href="#为何session适合用-redis" aria-label="Permalink to &quot;为何session适合用 redis?&quot;">​</a></h4><ul><li>session 访问频繁， 对性能要求极高。</li><li>session 可不考虑断电丢失数据的问题（内存的硬伤）</li><li>session 数据量不会太大（相比于mysql中存储的数据）</li></ul><h4 id="为何网站数据不适合用redis" tabindex="-1">为何网站数据不适合用redis？ <a class="header-anchor" href="#为何网站数据不适合用redis" aria-label="Permalink to &quot;为何网站数据不适合用redis？&quot;">​</a></h4><ul><li>操作频率不是太高（相比于session操作）</li><li>断电不能丢失， 必须保留</li><li>数据量太大， 内存成本太高</li></ul><h3 id="redis安装" tabindex="-1">redis安装 <a class="header-anchor" href="#redis安装" aria-label="Permalink to &quot;redis安装&quot;">​</a></h3><p><a href="https://www.runoob.com/redis/redis-install.html" target="_blank" rel="noreferrer">https://www.runoob.com/redis/redis-install.html</a></p><p>可参考此网站安装配置。</p><h4 id="启动" tabindex="-1">启动 <a class="header-anchor" href="#启动" aria-label="Permalink to &quot;启动&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>redis-server.exe</span></span></code></pre></div><h4 id="node-js连接redis" tabindex="-1">Node.js连接redis <a class="header-anchor" href="#node-js连接redis" aria-label="Permalink to &quot;Node.js连接redis&quot;">​</a></h4><p>首先我们需要安装一个redis包。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npm i redis --save</span></span></code></pre></div><h2 id="nignx代理-和前端联调" tabindex="-1">nignx代理（和前端联调） <a class="header-anchor" href="#nignx代理-和前端联调" aria-label="Permalink to &quot;nignx代理（和前端联调）&quot;">​</a></h2><p>一般前端的接口号会与server接口并不一样， 这时候我们需要一个接口进行代理， 使他们访问相同的接口。</p><h3 id="nignx介绍" tabindex="-1">nignx介绍 <a class="header-anchor" href="#nignx介绍" aria-label="Permalink to &quot;nignx介绍&quot;">​</a></h3><ul><li>高性能的web服务器， 开源免费</li><li>一般用于做静态服务，负载均衡</li><li>还有反向代理</li></ul><h4 id="什么叫做静态服务呢" tabindex="-1">什么叫做静态服务呢？ <a class="header-anchor" href="#什么叫做静态服务呢" aria-label="Permalink to &quot;什么叫做静态服务呢？&quot;">​</a></h4><p>比如说我们做了一个CDN， 就是那种网上放图片，放css文件，放js文件， 或者放静态的集群文件， html文件。只要是服务端不需要解析直接返回那种静态文件都可以用nginx做一个高性能的静态服务。</p><h3 id="负载均衡" tabindex="-1">负载均衡 <a class="header-anchor" href="#负载均衡" aria-label="Permalink to &quot;负载均衡&quot;">​</a></h3><p>比如说我们有一个server的集群，集群有5台机器。其中一台是主机器，流量都在主机器上。剩下的那几台怎么去均分流量，怎么去分摊， 怎么让每个机器能平摊各种流量。以至于我们整个集群的负载能到最高。这也可以通过nginx配置。 它内部的一个模块可以做到这些。它可以做一个入口， 流量来了它分配到不同的机器上去，平均分配。</p><p><img src="https://blog-picgo-typora.oss-cn-hangzhou.aliyuncs.com/image-20220805085222095.png" alt="image-20220805085222095"></p><h4 id="反向代理" tabindex="-1">反向代理 <a class="header-anchor" href="#反向代理" aria-label="Permalink to &quot;反向代理&quot;">​</a></h4><p>所谓反向代理就是它是对客户端不可见的代理，就叫反向代理。</p><p>server端全部涵盖了，客户端控制不了，对客户端来说它是一个黑盒，这样就叫做反向代理。</p><h4 id="正向代理" tabindex="-1">正向代理 <a class="header-anchor" href="#正向代理" aria-label="Permalink to &quot;正向代理&quot;">​</a></h4><p>和反向代理相反的是正向代理， 比如我们公司的内网， 我们在家里访问不了，我们需要在本地装一个代理工具，然后才能访问。这属于一个正向代理。浏览器客户端能够控制的代理。</p><h4 id="nginx使用" tabindex="-1">nginx使用 <a class="header-anchor" href="#nginx使用" aria-label="Permalink to &quot;nginx使用&quot;">​</a></h4><p>首先需要进行安装， <a href="http://nginx.org/en/download.html" target="_blank" rel="noreferrer">niginx：下载</a></p><p>测试配置文件格式是否正确：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>nginx -t</span></span></code></pre></div><p>启动nginx</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>start nginx</span></span></code></pre></div><p>重启nginx</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>nginx.exe -s reload</span></span></code></pre></div><p>停止</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>nginx -s stop</span></span></code></pre></div><p>重新打开日志文件</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>nginx.exe -s reopen</span></span></code></pre></div><p>查看nginx版本</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>nginx -v</span></span></code></pre></div><h5 id="配置" tabindex="-1">配置 <a class="header-anchor" href="#配置" aria-label="Permalink to &quot;配置&quot;">​</a></h5><p>打开nginx-1.16.1\\conf\\nginx.conf文件进行配置</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>	    location / {</span></span>
<span class="line"><span>            proxy_pass: http://localhost:8001;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>		location /api/ {</span></span>
<span class="line"><span>			proxy_pass: http://lcoalhost:8000;</span></span>
<span class="line"><span>			proxy_set_header HOST $host;</span></span>
<span class="line"><span>		}</span></span></code></pre></div><p>/表示根目录， 代理到8001。 8001是前端端口 /api标识api接口 代理到8000. 8000是server端端口</p><p>后端端口代理需要把host传进去， 因为此时他的host不一样了。</p><p>此时在访问</p><p>就可以了</p><h2 id="安全" tabindex="-1">安全 <a class="header-anchor" href="#安全" aria-label="Permalink to &quot;安全&quot;">​</a></h2><h3 id="sql注入" tabindex="-1">sql注入 <a class="header-anchor" href="#sql注入" aria-label="Permalink to &quot;sql注入&quot;">​</a></h3><p>最原始，最简单的攻击， 从有了web2.0就有了sql注入攻击。</p><p>攻击方式： 输入一个sql片段， 最终拼接成一段攻击代码</p><p>预防措施： 使用mysql的escape 函数处理输入内容即可</p><p>如下：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> mysql</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;mysql&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    exec,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    escape: mysql.escape</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>使用：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">escape</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;../db/mysql&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> login</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">username</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">password</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    username </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> escape</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(username)</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    password </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> escape</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(password)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> sql</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        select username, realname from users where username=&#39;\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">username</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&#39; and password=&#39;\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">password</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&#39;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    \`</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> exec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sql).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">rows</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rows[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    login</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="xss攻击" tabindex="-1">xss攻击 <a class="header-anchor" href="#xss攻击" aria-label="Permalink to &quot;xss攻击&quot;">​</a></h3><p>所谓xss攻击指的就是在网页中写入一段js代码以获取用户信息。</p><p>如我新建了一篇博客， 在博客内容中有以下一段js代码，</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&lt;script&gt;console.log(document.cookie);&lt;/script&gt;</span></span></code></pre></div><p>然后我创建成功后， 别人看到这篇博客我就能获取它的cookie信息， 并发送到我的服务器。</p><h4 id="预防" tabindex="-1">预防 <a class="header-anchor" href="#预防" aria-label="Permalink to &quot;预防&quot;">​</a></h4><p>首先我们需要安装一个插件</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npm i xss</span></span></code></pre></div><p>直接在代码中引入使用</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>const xss = require(&#39;xss&#39;)</span></span></code></pre></div><p>使用：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>title = xss(escape(title))</span></span></code></pre></div><p>可以先使用xss后在使用escape函数。</p><h3 id="密码加密" tabindex="-1">密码加密 <a class="header-anchor" href="#密码加密" aria-label="Permalink to &quot;密码加密&quot;">​</a></h3><ul><li>万一数据库被攻破， 最不应该泄露的就是用户信息。</li><li>攻击方式： 获取用户名和密码， 再去尝试登录其他系统</li><li>预防措施： 将密码加密， 即便拿到密码也不知道明文</li></ul><p>cryp.js</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> crypto</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;crypto&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//密匙</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> SECRET_KEY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;WJiol_8776#&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//md5 加密</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> md5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> md5 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> crypto.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createHash</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;md5&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> md5.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(content).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">digest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hex&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//加密函数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> genPassword</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">password</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> str</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`password=\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">password</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&amp;key=\${</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SECRET_KEY</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> md5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(str)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    genPassword</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>登录时使用：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">genPassword</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;../utils/cryp&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//生成加密密码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">password </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> genPassword</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(password)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">password </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> escape</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(password)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//防止xss攻击</span></span></code></pre></div><h3 id="网站运行流程图" tabindex="-1">网站运行流程图 <a class="header-anchor" href="#网站运行流程图" aria-label="Permalink to &quot;网站运行流程图&quot;">​</a></h3><p><img src="https://blog-picgo-typora.oss-cn-hangzhou.aliyuncs.com/image-20220805085249591.png" alt="image-20220805085249591"></p><h2 id="express" tabindex="-1">express <a class="header-anchor" href="#express" aria-label="Permalink to &quot;express&quot;">​</a></h2><h3 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h3><p>首先需要安装脚手架</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npm i express-generator -g</span></span></code></pre></div><p>创建项目：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>express blog-express</span></span></code></pre></div><p>进入目录安装npm包</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>cd blog-express</span></span>
<span class="line"><span>npm i</span></span></code></pre></div><p>启动</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npm start</span></span></code></pre></div><h3 id="登录" tabindex="-1">登录 <a class="header-anchor" href="#登录" aria-label="Permalink to &quot;登录&quot;">​</a></h3><p>使用 express-session 和 connect-redis</p><p>req.session保存登录信息， 登陆校验做成 express 中间件</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npm i express-session</span></span></code></pre></div><h4 id="使用-1" tabindex="-1">使用 <a class="header-anchor" href="#使用-1" aria-label="Permalink to &quot;使用&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>const session = require(&#39;express-session&#39;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>app.use(session({</span></span>
<span class="line"><span>  secret: &#39;WJiol#23123_&#39;,</span></span>
<span class="line"><span>  cookie: {</span></span>
<span class="line"><span>    // path: &#39;/&#39;,  //默认配置</span></span>
<span class="line"><span>    // httpOnly: true,    //默认配置</span></span>
<span class="line"><span>    maxAge: 24 * 60 * 60 * 1000</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}))</span></span></code></pre></div><h3 id="使用redis" tabindex="-1">使用redis <a class="header-anchor" href="#使用redis" aria-label="Permalink to &quot;使用redis&quot;">​</a></h3><p>首先安装以下两个插件</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npm i redis connect-redis --save</span></span></code></pre></div><p>app.js</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> session</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;express-session&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> RedisStore</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;connect-redis&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(session)</span></span>
<span class="line highlighted"><wbr></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> redisClient</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./db/redis&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> sessionStore</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RedisStore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  client: redisClient</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">session</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  secret: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;WJiol#23123_&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//秘钥，不可暴露</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  resave: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  saveUninitialized: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  cookie: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    maxAge: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">24</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 60</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 60</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  store: sessionStore</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//redis存储</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}))</span></span></code></pre></div><p>redis.js</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> redis</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;redis&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">REDIS_CONF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;../conf/db&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//创建客户端</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> redisClient</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  redis.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">REDIS_CONF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.port, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">REDIS_CONF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.host)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">redisClient.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;error&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(err)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> redisClient</span></span></code></pre></div><h3 id="记录日志" tabindex="-1">记录日志 <a class="header-anchor" href="#记录日志" aria-label="Permalink to &quot;记录日志&quot;">​</a></h3><p>使用脚手架推荐的morgan</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>const ENV = process.env.NODE_ENV</span></span>
<span class="line"><span>if (ENV !== &#39;production&#39;) {</span></span>
<span class="line"><span>  //开发测试环境</span></span>
<span class="line"><span>  app.use(logger(&#39;dev&#39;));</span></span>
<span class="line"><span>} else {</span></span>
<span class="line"><span>  // 线上环境</span></span>
<span class="line"><span>  const logFileName = path.join(__dirname,&#39;logs&#39;,&#39;access.log&#39;)</span></span>
<span class="line"><span>  const writeStream = fs.createWriteStream(logFileName, {</span></span>
<span class="line"><span>    flags: &#39;a&#39;</span></span>
<span class="line"><span>  })</span></span>
<span class="line"><span>  app.use(logger(&#39;combined&#39;, {</span></span>
<span class="line"><span>    stream: writeStream</span></span>
<span class="line"><span>  }));</span></span>
<span class="line"><span>}</span></span></code></pre></div><h3 id="express中间件原理" tabindex="-1">express中间件原理 <a class="header-anchor" href="#express中间件原理" aria-label="Permalink to &quot;express中间件原理&quot;">​</a></h3><p><img src="https://blog-picgo-typora.oss-cn-hangzhou.aliyuncs.com/image-20220805085316017.png" alt="image-20220805085316017"></p><h2 id="koa2" tabindex="-1">KOA2 <a class="header-anchor" href="#koa2" aria-label="Permalink to &quot;KOA2&quot;">​</a></h2><h3 id="async-await要点" tabindex="-1">async/await要点 <a class="header-anchor" href="#async-await要点" aria-label="Permalink to &quot;async/await要点&quot;">​</a></h3><ol><li>await 后面可以追加 promise对象， 获取 resolve 的值</li><li>await 必须包裹在 async 函数里面</li><li>async 函数执行返回的也是一个promise对象</li><li>try-catch 截获 promise 中 reject 的值</li></ol><h3 id="安装-1" tabindex="-1">安装 <a class="header-anchor" href="#安装-1" aria-label="Permalink to &quot;安装&quot;">​</a></h3><p>首先安装脚手架工具</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npm i koa-generator -g</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>koa2 blog-koa2</span></span></code></pre></div><h3 id="登录-1" tabindex="-1">登录 <a class="header-anchor" href="#登录-1" aria-label="Permalink to &quot;登录&quot;">​</a></h3><p>基于 koa-generic-session 和 koa-redis</p><p>需要安装3个插件</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npm i koa-generic-session koa-redis redis</span></span></code></pre></div><p>app.js</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> session</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;koa-generic-session&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> redisStore</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;koa-redis&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//session 配置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.keys </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;WJiol#23123_&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">session</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //配置cookie</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  cookie: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    path: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    httpOnly: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    maxAge: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">24</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 60</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 60</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //配置 redis</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  store: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">redisStore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    all: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`\${</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">REDIS_CONF</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">host</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}:\${</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">REDIS_CONF</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">port</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// routes</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(index.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">routes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), index.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">allowedMethods</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(users.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">routes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), users.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">allowedMethods</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(blog.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">routes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), blog.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">allowedMethods</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(user.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">routes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), user.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">allowedMethods</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><p>session一定要在routes前进行配置</p><h3 id="koa2记录日志" tabindex="-1">koa2记录日志 <a class="header-anchor" href="#koa2记录日志" aria-label="Permalink to &quot;koa2记录日志&quot;">​</a></h3><p>安装插件</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npm i koa-morgan --save</span></span></code></pre></div><p>引入</p><p>app.js</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;path&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;fs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> morgan</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;koa-morgan&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>app.js</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NODE_ENV</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;production&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //开发测试环境</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">morgan</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;dev&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //线上环境</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> logFileName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__dirname,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;logs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;access.log&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> writeStream</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createWriteStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(logFileName, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    flags: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">morgan</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;combined&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    stream: writeStream</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="上线与配置" tabindex="-1">上线与配置 <a class="header-anchor" href="#上线与配置" aria-label="Permalink to &quot;上线与配置&quot;">​</a></h2><h3 id="pm2" tabindex="-1">pm2 <a class="header-anchor" href="#pm2" aria-label="Permalink to &quot;pm2&quot;">​</a></h3><h4 id="下载安装" tabindex="-1">下载安装 <a class="header-anchor" href="#下载安装" aria-label="Permalink to &quot;下载安装&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npm install pm2 -g</span></span></code></pre></div><p>查看版本</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>pm2 --version</span></span></code></pre></div><h4 id="常用命令" tabindex="-1">常用命令 <a class="header-anchor" href="#常用命令" aria-label="Permalink to &quot;常用命令&quot;">​</a></h4><p>多种启动方式， 后面跟配置文件</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>pm2 start ...</span></span></code></pre></div><p>pm2进程列表</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>pm2 list</span></span></code></pre></div><p>重启进程</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>pm2 restart 0</span></span></code></pre></div><p>或者</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>pm2 restart app</span></span></code></pre></div><p>后面跟id或者进程名</p><p>停止进程</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>pm2 stop app/id</span></span></code></pre></div><p>删除进程</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>pm2 delete app/id</span></span></code></pre></div><p>查看基本信息</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>pm2 info app/id</span></span></code></pre></div><p>查看进程日志</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>pm2 log app/id</span></span></code></pre></div><p>监控cpu和内存信息</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>pm2 monit app/id</span></span></code></pre></div><h4 id="常用配置" tabindex="-1">常用配置 <a class="header-anchor" href="#常用配置" aria-label="Permalink to &quot;常用配置&quot;">​</a></h4><p>pm2.conf.json</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>{</span></span>
<span class="line"><span>    &quot;apps&quot;: {</span></span>
<span class="line"><span>        &quot;name&quot;: &quot;pm2-test-server&quot;,</span></span>
<span class="line"><span>        &quot;script&quot;: &quot;bin/www&quot;,</span></span>
<span class="line"><span>        &quot;watch&quot;: true,</span></span>
<span class="line"><span>        &quot;ignore_watch&quot;: [</span></span>
<span class="line"><span>            &quot;node_modules&quot;,</span></span>
<span class="line"><span>            &quot;logs&quot;</span></span>
<span class="line"><span>        ],</span></span>
<span class="line"><span>        &quot;instances&quot;: 4,</span></span>
<span class="line"><span>        &quot;error_file&quot;: &quot;logs/err.log&quot;,</span></span>
<span class="line"><span>        &quot;out_file&quot;: &quot;logs/out.log&quot;,</span></span>
<span class="line"><span>        &quot;log_date_format&quot;: &quot;YYYY-MM-DD HH:mm:ss&quot;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>name: pm2-test-server app名称</p><p>script: app.js 启动文件</p><p>watch: true 上线自动重启。 建议设置为false， 再自己手动重启</p><p>innore_watch ： [ &quot;logs&quot; ] 即使logs文件夹内有文件改动也不监听， 不重启</p><p>&quot;instances&quot;: 4, 使用4核运行</p><p>error_file : &quot;logs/err.log&quot; 错误日志存放 / console.error()</p><p>out_file : &quot;logs/out.log&quot; 日志存放 / console.log()</p><p>log_date_format :&quot;YYYY-MM-DD HH:mm:ss&quot; 每条日志增加时间戳</p>`,316),l=[p];function t(h,k,r,d,o,c){return i(),a("div",null,l)}const u=s(e,[["render",t]]);export{E as __pageData,u as default};
