import{_ as s,c as a,o as i,a3 as n}from"./chunks/framework.47i9LX9H.js";const E=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"小程序/微信小程序.md","filePath":"小程序/微信小程序.md"}'),t={name:"小程序/微信小程序.md"},p=n(`<h2 id="微信小程序" tabindex="-1">微信小程序： <a class="header-anchor" href="#微信小程序" aria-label="Permalink to &quot;微信小程序：&quot;">​</a></h2><h3 id="vscode的插件推荐" tabindex="-1">vscode的插件推荐 <a class="header-anchor" href="#vscode的插件推荐" aria-label="Permalink to &quot;vscode的插件推荐&quot;">​</a></h3><p>minapp插件很好用。</p><h3 id="小程序组织结构" tabindex="-1">小程序组织结构 <a class="header-anchor" href="#小程序组织结构" aria-label="Permalink to &quot;小程序组织结构&quot;">​</a></h3><p>小程序下有三个全局文件，<code>app.json</code>全局配置文件，<code>app.wxss</code>全局样式文件，<code>app.js</code>全局业务文件， 三个文件名字不能更改！</p><p>小程序可以有多个Page页面所组成。</p><p><img src="https://blog-picgo-typora.oss-cn-hangzhou.aliyuncs.com/image-20220805084802731.png" alt="image-20220805084802731"></p><p><code>project.config.json</code>小程序根据用户环境生成的配置文件， 我们不需要关注。</p><p>所有页面都要在<code>app.json</code>文件中有配置， 没有配置的页面不会进行显示。</p><h3 id="前端设计稿" tabindex="-1">前端设计稿 <a class="header-anchor" href="#前端设计稿" aria-label="Permalink to &quot;前端设计稿&quot;">​</a></h3><p>以Iphone6为标准： 750 * 1334</p><ul><li>小程序设计稿依据：</li></ul><p>以iphone6为基准，宽度为750个物理像素，对应逻辑分辨率为375pt，高度为667 * 2 个物理像素，即1334个物理像素 对应逻辑分辨率为667pt</p><div class="tip custom-block"><p class="custom-block-title">备注</p><p>物理像素的尺寸并不是真实物理尺寸，没有长度概念，指代的是像素点的个数（点是没有尺寸概念的）</p><p>px不会自适应，在所有屏幕上大小不变，rpx会根据屏幕自适应，以iphone6为基准的前提下(屏幕显示宽度为375pt) 在css中写px，和iphone6的pt 是1:1的关系，如375px对应了375pt</p><p>写rpx，则是2:1的关系，如750rpx对应了375pt</p></div><h3 id="自定义事件激活" tabindex="-1">自定义事件激活 <a class="header-anchor" href="#自定义事件激活" aria-label="Permalink to &quot;自定义事件激活&quot;">​</a></h3><ul><li>首先在页面写一个事件 <code>bind:like=&quot;onLike&quot;</code>，在对应的 js 内写入相应事件函数</li></ul><div class="language-wxml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">wxml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&lt;v-like class=&quot;like&quot; bind:like=&quot;onLike&quot; count=&quot;{{likeCount}}&quot; isLike=&quot;{{likeStatus}}&quot;&gt;&lt;/v-like&gt;</span></span></code></pre></div><ul><li>组件内</li></ul><div class="language-wxml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">wxml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&lt;view bindtap=&quot;onLike&quot; class=&quot;container&quot;&gt;</span></span>
<span class="line"><span>	&lt;image class=&quot;icon&quot; src=&quot;{{isLike?like:disLike}}&quot;&gt;&lt;/image&gt;</span></span>
<span class="line"><span>	&lt;text class=&quot;like-num&quot;&gt;{{count}}&lt;/text&gt;</span></span>
<span class="line"><span>&lt;/view&gt;</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  methods</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    onLike</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> behavior</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.data.isLike </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;like&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;cancel&#39;</span></span>
<span class="line highlighted"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">triggerEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;like&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        behavior</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }, {})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span></code></pre></div><h3 id="observer函数应用-修改组件属性" tabindex="-1">observer函数应用（修改组件属性） <a class="header-anchor" href="#observer函数应用-修改组件属性" aria-label="Permalink to &quot;observer函数应用（修改组件属性）&quot;">​</a></h3><p>监听组件属性变化时触发</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">properties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:String,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    observer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">newVal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">oldVal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">changedPath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> val </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newVal </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;0&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">newVal</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">newVal</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        _index:val</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span></code></pre></div><p>需要注意千万不要在 <code>observer</code> 中修改自身属性值， 可增加一个 data 属性 <code>_index</code> 作为修改变量的值.</p><h3 id="组件继承-behavior" tabindex="-1">组件继承-Behavior <a class="header-anchor" href="#组件继承-behavior" aria-label="Permalink to &quot;组件继承-Behavior&quot;">​</a></h3><p>作用： 可以在多个组件内共用一段代码</p><p>写法：</p><p>先建立一个js文件</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> classicBeh</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Behavior</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  properties: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    img: String,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    content: String,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    hidden: Boolean</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  classicBeh</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在组件内使用</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  classicBeh</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;../classic-beh&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  behaviors: [classicBeh],</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h3 id="页面传值" tabindex="-1">页面传值 <a class="header-anchor" href="#页面传值" aria-label="Permalink to &quot;页面传值&quot;">​</a></h3><ul><li>传值：</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   * 组件的方法列表</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  methods</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    onTap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> bid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.properties.book.id</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      wx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">navigateTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        url: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`/pages/book-detail/index?bid=\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">bid</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span></code></pre></div><ul><li>接收：</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> bid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> options.bid</span></span></code></pre></div><h3 id="slot插槽使用" tabindex="-1">slot插槽使用 <a class="header-anchor" href="#slot插槽使用" aria-label="Permalink to &quot;slot插槽使用&quot;">​</a></h3><ul><li>在组件内开启插槽</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  multipleSlots</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span></code></pre></div><ul><li>在组件内定义插槽</li></ul><div class="language-wxml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">wxml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&lt;view class=&quot;container tag-class&quot; bind:tap=&quot;onClick&quot;&gt;</span></span>
<span class="line"><span>	&lt;text class=&quot;comment&quot;&gt;{{text}}&lt;/text&gt;</span></span>
<span class="line"><span>	&lt;slot name=&quot;after&quot;&gt;&lt;/slot&gt;</span></span>
<span class="line"><span>&lt;/view&gt;</span></span></code></pre></div><ul><li>在页面中使用</li></ul><div class="language-wxml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">wxml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&lt;v-tag text=&quot;{{item.content}}&quot; tag-class=&quot;{{tool.highlight(index)}}&quot;&gt;</span></span>
<span class="line highlighted"><span>  &lt;text class=&quot;num&quot; slot=&quot;after&quot;&gt;{{&#39;+&#39;+item.nums}}&lt;/text&gt;</span></span>
<span class="line"><span>&lt;/v-tag&gt;</span></span></code></pre></div><p>slot 名字与组件内 slot 的 name 相同即可，可写入多个插槽，name 要不一样</p><h3 id="自定义组件样式" tabindex="-1">自定义组件样式 <a class="header-anchor" href="#自定义组件样式" aria-label="Permalink to &quot;自定义组件样式&quot;">​</a></h3><h4 id="hack方式" tabindex="-1">hack方式 <a class="header-anchor" href="#hack方式" aria-label="Permalink to &quot;hack方式&quot;">​</a></h4><p>小程序目前不支持自定义组件的样式， 可以先选中某个组件元素，再向下寻找想要设置样式的子元素进行设置， 尽量使用子元素选择器，以免影响后代元素样式，如下：</p><div class="language-wxss vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">wxss</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>.comment-container&gt;v-tag:nth-child(1)&gt;view {</span></span>
<span class="line"><span>  background-color: #fffbdd;</span></span>
<span class="line"><span>}</span></span></code></pre></div><h4 id="外部样式" tabindex="-1">外部样式 <a class="header-anchor" href="#外部样式" aria-label="Permalink to &quot;外部样式&quot;">​</a></h4><p>可以使用 index 获取 for 循环中的第几个元素，这里利用了 wxs 的方式根据 index 来确定不同的类名。</p><ul><li>页面wxml：</li></ul><div class="language-wxml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">wxml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&lt;block wx:for=&quot;{{util.limit(shortComment,10)}}&quot; wx:key=&quot;content&quot;&gt;</span></span>
<span class="line"><span>  &lt;v-tag text=&quot;{{item.content}}&quot; tag-class=&quot;{{tool.highlight(index)}}&quot;&gt;</span></span>
<span class="line"><span>    &lt;text class=&quot;num&quot; slot=&quot;after&quot;&gt;{{&#39;+&#39;+item.nums}}&lt;/text&gt;</span></span>
<span class="line"><span>  &lt;/v-tag&gt;</span></span>
<span class="line"><span>&lt;/block&gt;</span></span></code></pre></div><div class="language-wxml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">wxml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&lt;wxs module=&quot;tool&quot;&gt;</span></span>
<span class="line"><span>	var highlight = function(index){</span></span>
<span class="line"><span>		if(index===0){</span></span>
<span class="line"><span>			return &#39;ex-tag1&#39;</span></span>
<span class="line"><span>		}</span></span>
<span class="line"><span>		if(index===1){</span></span>
<span class="line"><span>			return &#39;ex-tag2&#39;</span></span>
<span class="line"><span>		}</span></span>
<span class="line"><span>		return &#39;&#39;</span></span>
<span class="line"><span>	}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	module.exports = {</span></span>
<span class="line"><span>		highlight:highlight</span></span>
<span class="line"><span>	}</span></span>
<span class="line"><span>&lt;/wxs&gt;</span></span></code></pre></div><ul><li>页面wxss：</li></ul><div class="language-wxss vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">wxss</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>.ex-tag1 {</span></span>
<span class="line"><span>  background-color: #fffbdd !important;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>.ex-tag2 {</span></span>
<span class="line"><span>  background-color: #eefbff !important;</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>如果不用 <code>!important</code> 要记的提升样式的优先级， 保证修改的样式生效。</p><ul><li>组件wxml：</li></ul><div class="language-wxml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">wxml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&lt;view class=&quot;container tag-class&quot; bind:tap=&quot;onClick&quot;&gt;</span></span>
<span class="line"><span>	&lt;text class=&quot;comment&quot;&gt;{{text}}&lt;/text&gt;</span></span>
<span class="line"><span>	&lt;slot name=&quot;after&quot;&gt;&lt;/slot&gt;</span></span>
<span class="line"><span>&lt;/view&gt;</span></span></code></pre></div><ul><li>组件js：</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  externalClasses: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;tag-class&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h3 id="wxs的使用" tabindex="-1">WXS的使用 <a class="header-anchor" href="#wxs的使用" aria-label="Permalink to &quot;WXS的使用&quot;">​</a></h3><p>wxs基本与ES5相同， 但也有细微的差别， 比如不能使用ES6的<code>const</code>等。可以用它来写过滤器。</p><p>先创建一个 <strong>filter.wxs</strong> 文件， 在文件写入一下， 使用的是<code>module.export</code>， 而不是ES6的<code>export</code>。而且文件名后缀是 <code>wxs</code>， 而不是 <code>js</code>。</p><p>fiter.wxs</p><div class="language-wxs vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">wxs</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>var format = function (text) {</span></span>
<span class="line"><span>  if (!text) {</span></span>
<span class="line"><span>    return</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  var reg = getRegExp(&#39;\\\\\\\\n&#39;, &#39;g&#39;)</span></span>
<span class="line"><span>  return text.replace(reg, &#39;\\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&#39;)</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>var limit = function (array, length) {</span></span>
<span class="line"><span>  return array.slice(0, length)</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>module.exports = {</span></span>
<span class="line"><span>  format: format,</span></span>
<span class="line"><span>  limit: limit</span></span>
<span class="line"><span>}</span></span></code></pre></div><ul><li>在需要引入的wxml文件中</li></ul><div class="language-wxml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">wxml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&lt;wxs src=&quot;../../utils/filter.wxs&quot; module=&quot;util&quot; /&gt;</span></span></code></pre></div><p>使用方式如下：</p><div class="language-wxml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">wxml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&lt;block wx:for=&quot;{{util.limit(shortComment,10)}}&quot; wx:key=&quot;content&quot;&gt;</span></span></code></pre></div>`,69),l=[p];function e(h,k,o,c,d,r){return i(),a("div",null,l)}const u=s(t,[["render",e]]);export{E as __pageData,u as default};
