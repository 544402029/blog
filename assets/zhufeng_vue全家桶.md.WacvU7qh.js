import{_ as e,c as i,o as a,a3 as l}from"./chunks/framework.47i9LX9H.js";const v=JSON.parse('{"title":"vue全家桶","description":"","frontmatter":{},"headers":[],"relativePath":"zhufeng/vue全家桶.md","filePath":"zhufeng/vue全家桶.md"}'),s={name:"zhufeng/vue全家桶.md"},t=l(`<h1 id="vue全家桶" tabindex="-1">vue全家桶 <a class="header-anchor" href="#vue全家桶" aria-label="Permalink to &quot;vue全家桶&quot;">​</a></h1><p>源码实现方式请通过该专栏查看<a href="https://juejin.cn/column/7353112518145703988" target="_blank" rel="noreferrer">从零实现vue3核心源码 - 似若秋叶的专栏 - 掘金</a>。</p><p>源码仓库：<a href="https://gitee.com/l544402029/vue3-source-code" target="_blank" rel="noreferrer">vue3源码解读: 手写vue3核心源码，内含详细解读</a></p><h2 id="vue路由" tabindex="-1">vue路由 <a class="header-anchor" href="#vue路由" aria-label="Permalink to &quot;vue路由&quot;">​</a></h2><p>前端路由的特点就是根据路径的变化，渲染对应的组件。</p><h3 id="路由的模式" tabindex="-1">路由的模式 <a class="header-anchor" href="#路由的模式" aria-label="Permalink to &quot;路由的模式&quot;">​</a></h3><ul><li>hash（#）</li><li>history（h5）</li><li>memory （内存型，不会修改url地址，服务端用的多）</li><li></li></ul><p><strong>hash</strong></p><ul><li><p>hash无法做ssr，history可以做ssr。hash是前端的锚点，不会发送给后端。seo优化hash是不支持的。</p></li><li><p>hash的特点刷新不会出现404。因为服务端无法获取 hash后面的东西。</p></li><li><p>缺点：丑，无法seo优化</p></li><li><p>优点：兼容性好</p></li></ul><p><strong>h5 api</strong></p><ul><li>好看，用起来方便</li><li>缺点：服务器没有对应的资源会产生404。解决方案就是无论访问什么资源都重定向到首页。</li><li>虽然用户访问的是 www.baidu.com/about -&gt; 返回的是首页内容 （但是vue会拿到当前/about. 找到组件来渲染）。需要服务端支持。</li></ul><p>实现方式</p><ul><li>hash模式如何实现路径的跳转和监控，onhashchange + location.hash</li><li>history模式如何实现跳转和监控，history.pushState(自己跳转逻辑) + popstate（前进后退的）</li><li>新版vue-router 采用一套方案 history.pushState + popstate 来实现即可，不用 hash（不考虑兼容性，全部采用pushState来实现两种路由方案）</li></ul><h2 id="vue面试题" tabindex="-1">vue面试题 <a class="header-anchor" href="#vue面试题" aria-label="Permalink to &quot;vue面试题&quot;">​</a></h2><h3 id="一、你知道哪些vue3新特性" tabindex="-1">一、你知道哪些vue3新特性？ <a class="header-anchor" href="#一、你知道哪些vue3新特性" aria-label="Permalink to &quot;一、你知道哪些vue3新特性？&quot;">​</a></h3><ul><li><p>CompositionAPI 组合式API</p><ul><li>使用函数的方式编写vue组件，最终可以组合在一起。</li><li>组合式API不是函数编程</li><li>组合式API (响应式部分<code>ref()</code>, <code>reactive()</code> , 生命周期钩子 <code>onMounted()</code>, <code>onUnmounted()</code>, 依赖注入 <code>provide()</code>,<code>inject()</code>)</li></ul></li><li><p>SFC Composition API Syntax Sugar (<code>&lt;script setup&gt;</code>)*</p><ul><li>单文件组合式API语法糖</li><li>代码写起来更简洁了不需要<code>return</code>，而且不用借助代理对象性能更好</li></ul></li><li><p>Teleport</p><ul><li>类似于React中的Portal组件（传送门）、指定将内容渲染到某个容器中。</li><li>用户也可以手动调用render方法来实现。</li><li>模态框组件或者弹框组件都可以用 Teleport 组件</li></ul></li><li><p>Fragments</p><ul><li>Fragment（片段）vue3中允许组件中包含多个根节点，好处就是无需无意义的包裹。</li></ul></li><li><p>Emits Component Option</p><ul><li>vue3中默认绑定的事件会绑定到根元素上，通过emits属性可以从attrs中移除，这样只能通过emit来触发对应的事件</li></ul></li><li><p>createRenderer API from @vue/runtime-core to create custom renderers</p><ul><li>创建渲染器，可以基于 runtime-core 创建自定义的渲染器。可以实现跨平台渲染。</li></ul></li><li><p>SFC State-driven CSS Variables <code>(v-bind in &lt;style&gt;</code>)*</p><ul><li>在单文件组件中通过v-bind 绑定 css 样式变量 <code>background:v-bind(color);</code></li></ul></li><li><p>SFC <code>&lt;style scoped&gt;</code> can now include global rules or rules that target only slotted content Suspense experimental</p><ul><li>在作用域样式中我们能包含全局的规则和针对插槽的规则</li></ul><div class="language-scss vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">scss</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:slotted(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.child</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">red</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 可以在作用域样式中影响全局样式 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:global(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">#root</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">red</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 修改别人组件中的样式可以采用:deep的方式 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.my</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> :deep(</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">yellow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;}</span></span></code></pre></div></li><li><p>Suspense experimental</p><ul><li>针对异步组件的优雅处理</li></ul></li></ul><h3 id="二、vue3对比vue2的变化" tabindex="-1">二、Vue3对比Vue2的变化？ <a class="header-anchor" href="#二、vue3对比vue2的变化" aria-label="Permalink to &quot;二、Vue3对比Vue2的变化？&quot;">​</a></h3><ul><li><p>性能优化（更快）</p><ul><li>使用 Proxy 替代了 <code>Object.defineProperty</code> (为什么？需要递归给对象中的所有属性增添 getter 和 setter，重写性能差，对新增的属性和删除的属性也无法监控 vm.$set vm.$delete。对数组也能监控但是性能依然差。defineProperty 不支持新的数据结构 map 和 set 都不支持)</li><li>模板编译优化：编译的过程中给节点增加 PatchFlag 标记；对静态节点静态提升，函数缓存。</li><li>Diff 算法 （全量diff 最长递增子序列，可以减少复用节点的移动）（非全量diff算法，只比较动态节点。通过PatchFlag更新动态的属性，减少递归操作）</li></ul></li><li><p>体积优化 （更小）</p><ul><li>Vue3移除了很多特性 <ul><li>Vue2中的 inline-template 基本用不到所以干掉了</li><li>删除了过滤器（通过计算属性来替代，或者自己写个方法来替代）</li><li>new Vue()=&gt;eventBus $on $off $emit (发布订阅) 官方觉得不需要了，如果你有需要可以通过 mitt 库来实现</li><li>.native .sync (.native 不需要 vue3中默认就是native，.sync没有了可以直接通过 v-model) @keyup.enter(无法通过keycode来实现修饰符)</li><li>$children 来封装组件交互（vue3不再有此方法 provide和inject）</li><li>全局api都不再使用了 Vue.use Vue.component Vue.directive</li></ul></li><li>Vue3所有的api都是基于函数可以按需导入，配合构建工具可以实现 tree-shaking，用户最终打包的体积小</li></ul></li><li><p>createRender 自定义渲染器允许跨平台，vue2中只能改源码，扩展能力更强</p></li><li><p>vue3支持ts 源码采用monorepo分模块打包，可以不引用完整的vue</p></li></ul><h3 id="三、如何看待-composition-api-和-options-api" tabindex="-1">三、如何看待 Composition API 和 Options API? <a class="header-anchor" href="#三、如何看待-composition-api-和-options-api" aria-label="Permalink to &quot;三、如何看待 Composition API 和 Options API?&quot;">​</a></h3><ul><li>如果采用Options API 会将代码分散在不同的地方，会出现反复横跳的问题。Composition API 可以将相关的逻辑收集在一起。</li><li>在 vue2中想让逻辑复用要Vue.mixin(命名冲突，数据来源不明确)，组合式可以方便的提取逻辑方便复用。</li><li>this问题，导致指向不明确，无法支持 tree-shaking</li></ul><blockquote><p>核心就是将业务逻辑相关的代码放在一起，可以复用。</p></blockquote><h3 id="四、如何理解-reactive、ref、toref-和-torefs" tabindex="-1">四、如何理解 reactive、ref、toRef 和 toRefs？ <a class="header-anchor" href="#四、如何理解-reactive、ref、toref-和-torefs" aria-label="Permalink to &quot;四、如何理解 reactive、ref、toRef 和 toRefs？&quot;">​</a></h3><ul><li>reactive: 特点就是将一个普通对象转换成响应式对象（采用的是 new Proxy），我们渲染的时候会使用产生的代理对象，当我访问代理对象属性的时候会进行依赖收集，当修改属性时会触发更新。</li><li>ref：创建一个包装对象，将简单的值进行包装成响应式对象。通过这个对象的.value来进行访问值，访问的时候会做依赖收集，修改.value值会触发更新（采用的是类的属性访问器），ref内部如果放的是对象也会采用reactive来实现</li><li>toRef：基于reactive将某个reactive中的某个属性转换成ref</li><li>toRefs：基于reactive将所有属性转换成ref</li></ul><h3 id="五、watch和watcheffect的区别" tabindex="-1">五、watch和watchEffect的区别？ <a class="header-anchor" href="#五、watch和watcheffect的区别" aria-label="Permalink to &quot;五、watch和watchEffect的区别？&quot;">​</a></h3><ul><li>watchEffect 等价于 effect， watch就是基于effect封装的自定义了scheduler</li><li>watchEffect 里面传递的是一个立即执行函数。被动追踪依赖的值，值变化了重新执行此方法</li><li>watch 监控某个值的变化，数据变化后会触发对应的回调</li></ul><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">watchEffect(()=&gt;app.innerHTML = state.xxx) // effect =&gt; getter</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">watch(()=&gt;state.xxx,()=&gt;{}) // getter scheduler</span></span></code></pre></div><h3 id="六、vue2和vue3核心diff算法区别" tabindex="-1">六、vue2和vue3核心diff算法区别？ <a class="header-anchor" href="#六、vue2和vue3核心diff算法区别" aria-label="Permalink to &quot;六、vue2和vue3核心diff算法区别？&quot;">​</a></h3><ul><li>对于vue2和vue3的全量diff算法，整体来说性能差异不大</li><li>默认都是采用同级比较+深度递归的方式进行比较</li><li>vue3中拥有最长递增子序列的算法优化了移动复用节点的频率 <ul><li>diff算法的原理： 1）先比较根节点 isSameVnode</li><li>如果不是相同节点删除后创建新节点，如果是相同节点泽复用比较属性和儿子</li><li>一方有儿子，一方没儿子， 两方都没儿子， 两方都有儿子</li><li>两方都有儿子才是diff算法的核心（先比头再比尾，确定是否是特殊情况，是的话直接操作，如果不是则采用最长递增子序列来进行优化复用节点）</li></ul></li><li>vue3中对比vue2性能优化在编译原理，编译的过程中会添加patchFlag，会产生对应的 block 节点来进行动态节点的收集，更新的时候只比较动态节点即可（靶向更新，减少了递归比较的方式）</li></ul><h3 id="七、v-if和v-for的优先级哪个高" tabindex="-1">七、v-if和v-for的优先级哪个高？ <a class="header-anchor" href="#七、v-if和v-for的优先级哪个高" aria-label="Permalink to &quot;七、v-if和v-for的优先级哪个高？&quot;">​</a></h3><p>在同一个节点中使用这两个指令。 在vue3中v-if优先级会高于v-for，v-if会被提升到v-for之前执行。如果v-if的值基于v-for，会报错。</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode } from &quot;vue&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">export function render(_ctx, _cache, $props, $setup, $data, $options) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  return (_ctx.item%2)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ? (_openBlock(true), _createElementBlock(_Fragment, { key: 0 }, _renderList(_ctx.arr, (item) =&gt; {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        return (_openBlock(), _createElementBlock(&quot;div&quot;))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }), 256 /* UNKEYED_FRAGMENT */))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    : _createCommentVNode(&quot;v-if&quot;, true)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">// Check the console for the AST</span></span></code></pre></div><p>v-if 和 v-for不要连用即可。</p><h3 id="八、vue-中的-v-if-和-v-show怎么理解" tabindex="-1">八、Vue 中的 v-if 和 v-show怎么理解？ <a class="header-anchor" href="#八、vue-中的-v-if-和-v-show怎么理解" aria-label="Permalink to &quot;八、Vue 中的 v-if 和 v-show怎么理解？&quot;">​</a></h3><ul><li>v-show 控制的是 display 样式， （v-show无论如何都执行）</li><li>v-if 控制的是dom的显示隐藏（v-if具备阻断内部代码的执行，如果条件不成立不执行内部的逻辑，如果成立则执行）</li></ul><blockquote><p>在页面第一次加载时就能确定显示隐藏用v-if，如果频繁切换显示隐藏则用v-show。</p></blockquote><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">span</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-show</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;true&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">span</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>在切换时会记录原始的diplay属性。</p><p>opacity:0 占位 可以进行DOM事件监听</p><p>visibility:hidden 占据页面空间</p><p>display:none; 不占位, 无法进行DOM事件监听。</p><h3 id="九、vue3组合式api生命周期钩子函数有变化吗" tabindex="-1">九、vue3组合式API生命周期钩子函数有变化吗？ <a class="header-anchor" href="#九、vue3组合式api生命周期钩子函数有变化吗" aria-label="Permalink to &quot;九、vue3组合式API生命周期钩子函数有变化吗？&quot;">​</a></h3><ul><li>beforeCreate created -&gt; setup</li><li>beforeMount -&gt; onBeforeMount</li><li>render</li><li>Mounted -&gt; onMounted</li><li>beforeUpdate -&gt; onBeforeUpdate</li><li>Updated -&gt; onUpdated</li><li>beforeUnmount -&gt; onBeforeUnmount</li><li>unmounted -&gt; onUnmounted</li><li>errorCaptured -&gt; onErrorCaptured 捕获错误</li><li>activated -&gt; onActivated Kee-Alive相关的</li><li>deactivated -&gt; onDeactivated</li></ul><h3 id="十、vue3中如何进行组件通信" tabindex="-1">十、Vue3中如何进行组件通信？ <a class="header-anchor" href="#十、vue3中如何进行组件通信" aria-label="Permalink to &quot;十、Vue3中如何进行组件通信？&quot;">​</a></h3><ul><li>父子 <code>props</code>来进行通信，通过 <code>ref</code> 来获取儿子， 儿子通过 <code>exposed</code>暴露方法让父亲调用，<code>$attrs</code>可以获取父亲传递的属性、插槽。</li><li>子父通过 <code>props</code> 来进行通信。<code>emit</code> 来触发给子组件绑定的事件 <code>$parent</code>, 作用域插槽</li><li>跨级 <code>provide/inject</code></li><li>兄弟 通过共同的父级来通信，vuex、pinia、自定义发布订阅来实现（不推荐）</li><li>v-model语法糖 本质就是 <code>props</code>+<code>emit</code></li></ul><h3 id="十一、说说你对双向绑定的理解-以及它的实现原理" tabindex="-1">十一、说说你对双向绑定的理解，以及它的实现原理？ <a class="header-anchor" href="#十一、说说你对双向绑定的理解-以及它的实现原理" aria-label="Permalink to &quot;十一、说说你对双向绑定的理解，以及它的实现原理？&quot;">​</a></h3><blockquote><p>v-model 实现原理 1）组件上 2）表单元素上（v-model是 input + value 语法糖?）</p></blockquote><ul><li>双向绑定一般针对的就是表单元素，当数据变化后会更新视图，当视图修改的时候会更新数据。MVVM v-&gt; vm -&gt; model</li><li>针对表单元素的 v-model 会根据表单类型解析出对应的事件（text类型会对中文做处理）</li><li>针对组件来说就是语法糖。传递属性和事件，可以通过 <code>v-model:xxx</code>方式来修改绑定的名字 （缩写）</li></ul><h3 id="十二、谈谈pinia" tabindex="-1">十二、谈谈pinia？ <a class="header-anchor" href="#十二、谈谈pinia" aria-label="Permalink to &quot;十二、谈谈pinia？&quot;">​</a></h3><ul><li>vuex 只有一份，基于复杂的树结构，管理困难</li><li>模块和根状态名字冲突怎么办？</li><li>数据调用的时候过程复杂，数据非扁平化。</li><li>mutation和action区别，功能繁琐</li><li>模块避免共用需要namespaced</li><li>不是ts写的，对ts支持也不好</li><li>vuex基于 optionsAPI, 针对vue3不友好</li></ul><h3 id="十三、vue-router" tabindex="-1">十三、Vue-Router <a class="header-anchor" href="#十三、vue-router" aria-label="Permalink to &quot;十三、Vue-Router&quot;">​</a></h3><ul><li>vue-router 两种前端模式 <ul><li>hash （丑，不会出现404、但是无法seo优化）</li><li>history （好看，需要服务端支持来解决404问题，可以seo）</li></ul></li><li>404问题咋解决，后端访问不存在的资源跳转到首页，首页会加载js根据路径渲染对应的组件。</li><li>路由守卫的执行过程（组合函数，promise链）</li><li>菜单权限 addRoute。访问权限 meta 属性 来做限制 （路由守卫）</li></ul><h3 id="十四、vue中异步组件的作用及原理" tabindex="-1">十四、Vue中异步组件的作用及原理 <a class="header-anchor" href="#十四、vue中异步组件的作用及原理" aria-label="Permalink to &quot;十四、Vue中异步组件的作用及原理&quot;">​</a></h3><p>defineAsyncComponent 来定义异步组件，内部传递工厂函数，来异步加载组件</p><ul><li>类似图片懒加载，默认展示异步占位符，后续加载完毕后显示真正的内容（响应式原理）</li><li>一般配合工程化工具，实现代码分割。</li></ul><h3 id="十五、keep-alive的原理" tabindex="-1">十五、Keep-Alive的原理 <a class="header-anchor" href="#十五、keep-alive的原理" aria-label="Permalink to &quot;十五、Keep-Alive的原理&quot;">​</a></h3><ul><li>缓存组件的虚拟节点（真实DOM） 直接在激活的时候可以复用老节点</li><li>缓存算法 LRU 最近最久未使用法。</li><li>keep-alive 因为走了缓存而数据无法得到更新（beforeRouteUpdate，activated 来更新数据）</li></ul>`,56),n=[t];function o(r,p,h,u,d,c){return a(),i("div",null,n)}const f=e(s,[["render",o]]);export{v as __pageData,f as default};
